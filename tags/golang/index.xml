<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 江 Blog</title>
    <link>https://bopjiang.github.io/tags/golang/</link>
    <description>Recent content in Golang on 江 Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Apr 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bopjiang.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL语句解析为AST</title>
      <link>https://bopjiang.github.io/post/2019/04/02/sql%E8%AF%AD%E5%8F%A5%E8%A7%A3%E6%9E%90%E4%B8%BAast/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2019/04/02/sql%E8%AF%AD%E5%8F%A5%E8%A7%A3%E6%9E%90%E4%B8%BAast/</guid>
      <description>&lt;p&gt;TiDB中的SQL Parser模块现在独立为一个库了，在其他项目也可以很方便的调用。&lt;/p&gt;&#xA;&lt;p&gt;一个例子：&lt;/p&gt;&#xA;&lt;script src=&#34;https://gist.github.com/bopjiang/b5d7de1471d1a1be3387e33c6eb30591.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h2 id=&#34;ast&#34;&gt;AST&lt;/h2&gt;&#xA;&lt;p&gt;解析出来是如下的样子：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-0 *ast.SelectStmt SELECT t1.a, t2.b FROM t1 JOIN t2 ON t1.id = t2.fid WHERE t1.c&amp;gt;100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.TableRefsClause&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.Join&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.TableSource&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.TableName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.TableSource&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.TableName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.OnCondition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.BinaryOperationExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-5 &#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-6 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-5 &#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-6 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.BinaryOperationExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*driver.ValueExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.FieldList&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.SelectField t1.a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.SelectField t2.b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SELECT语句被解析为三部分(L-1), TableRefsClause对应FROM语句部分，BinaryOperationExpr对应WHERE语句部分，FieldList对应Select字段部分&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于Go HTTP Timeout</title>
      <link>https://bopjiang.github.io/post/2019/03/02/%E5%85%B3%E4%BA%8Ego-http-timeout/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2019/03/02/%E5%85%B3%E4%BA%8Ego-http-timeout/</guid>
      <description>&lt;p&gt;上周碰到一个使用Traefik反向代理的问题, 正好跟HTTP Timeout相关，现将分析过程总结如下。&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题现象&#34;&gt;问题现象&lt;/h2&gt;&#xA;&lt;p&gt;客户端的一个文件请求，先经过反向代理， 再经过Server，最后数据从Storage中获取（类似S3）。 基本架构如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Client              |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GET /FileA HTTP/1.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; +-----------------------+        +-----------------+       +-----------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | Nginx/Traefik         |--------|  Server         |-------|  Storage        |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; +-----------------------+        +-----------------+       +-----------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反向代理最开始是使用的Nginx， 后来因为服务都在Docker部署，切换到Traefik。&lt;/p&gt;&#xA;&lt;p&gt;开始还没有问题, 直到有一天, 测试同学反馈客户端偶尔&lt;code&gt;GET /AFile&lt;/code&gt;请求老是被异常关闭， 请求响应越大概率失败概率越大， 网速不好的时候更容易出现。最开始还以为是客户端的锅。&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题定位&#34;&gt;问题定位&lt;/h2&gt;&#xA;&lt;p&gt;后面试了好几个客户端版本， 问题依然存在， 看来跟客户端最近的更新无关。&lt;/p&gt;&#xA;&lt;p&gt;排除了客户端后，开始怀疑Traefik这块配置有问题。查看服务端日志， 果然失败时Taefik有日志打印：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;2018/12/19 09:16:54 reverseproxy.go:395: httputil: ReverseProxy read error during body copy: unexpected EOF&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;traefik 上有个issue &lt;a href=&#34;https://github.com/containous/traefik/issues/2903&#34;&gt;#2903&lt;/a&gt; Truncated body when unexpected EOF，跟我们看到的现象是一样的。切换到Nginx后，问题不出现了, 更加证实了我们的判断。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang程序问题定位方法</title>
      <link>https://bopjiang.github.io/post/2017/10/31/golang%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2017/10/31/golang%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;本文总结的方法对Go1.6及以后版本有效。&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行时问题&#34;&gt;运行时问题&lt;/h2&gt;&#xA;&lt;p&gt;通过暴露http接口把运行栈打出来：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令如下:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl http://server:port/debug/pprof/goroutine?debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数debug=1时输出按照goroutine的当前栈位置汇总过的栈信息。 譬如可以看到某类goroutine运行了多少个，在遇到goroutine泄露的问题时比较有用。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;goroutine profile: total 104&#xA;100 @ 0x102ebdc 0x102ecce 0x10065a4 0x100624b 0x12e3683 0x105cbd1&#xA;#&#x9;0x12e3682&#x9;main.foo+0x42&#x9;/Users/bopjiang/code/test/go/stackdump.go:18&#xA;&#xA;1 @ 0x102ebdc 0x1029b8a 0x1029187 0x108f55e 0x108f5dd 0x109037a 0x10f1242 0x110264d 0x1258052 0x105cbd1&#xA;#&#x9;0x1029186&#x9;internal/poll.runtime_pollWait+0x56&#x9;&#x9;/usr/local/go/src/runtime/netpoll.go:173&#xA;#&#x9;0x108f55d&#x9;internal/poll.(*pollDesc).wait+0xad&#x9;&#x9;/usr/local/go/src/internal/poll/fd_poll_runtime.go:85&#xA;#&#x9;0x108f5dc&#x9;internal/poll.(*pollDesc).waitRead+0x3c&#x9;&#x9;/usr/local/go/src/internal/poll/fd_poll_runtime.go:90&#xA;#&#x9;0x1090379&#x9;internal/poll.(*FD).Read+0x189&#x9;&#x9;&#x9;/usr/local/go/src/internal/poll/fd_unix.go:125&#xA;#&#x9;0x10f1241&#x9;net.(*netFD).Read+0x51&#x9;&#x9;&#x9;&#x9;/usr/local/go/src/net/fd_unix.go:202&#xA;#&#x9;0x110264c&#x9;net.(*conn).Read+0x6c&#x9;&#x9;&#x9;&#x9;/usr/local/go/src/net/net.go:176&#xA;#&#x9;0x1258051&#x9;net/http.(*connReader).backgroundRead+0x61&#x9;/usr/local/go/src/net/http/server.go:660&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl http://server:port/debug/pprof/goroutine?debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数debug=2时输出的是详细每个goroutine的运行状态：调用栈信息，传入参数值，阻塞事件等待时间&#xA;最后的等待时间对定位程序挂起的问题很有用。譬如某个goroutine的channel写入阻塞了1个小时，那很有可能此channel的消费端出了问题。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;goroutine &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;chan receive, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; minutes&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main.foo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x1d&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/Users/bopjiang/code/test/go/stackdump.go:23 +0x7c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;created by main.main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/Users/bopjiang/code/test/go/stackdump.go:33 +0xae&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;goroutine &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;chan receive, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; minutes&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main.foo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/Users/bopjiang/code/test/go/stackdump.go:18 +0x43&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;created by main.main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/Users/bopjiang/code/test/go/stackdump.go:28 +0xae&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;goroutine &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;running&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime/pprof.writeGoroutineStacks&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x154b720, 0xc4201901c0, 0x0, 0xc42004fad0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/runtime/pprof/pprof.go:608 +0xa7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime/pprof.writeGoroutine&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x154b720, 0xc4201901c0, 0x2, 0x30, 0x135ff20&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/runtime/pprof/pprof.go:597 +0x44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime/pprof.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*Profile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.WriteTo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x157d720, 0x154b720, 0xc4201901c0, 0x2, 0xc4201901c0, 0x15893e0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/runtime/pprof/pprof.go:310 +0x3ab&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http/pprof.handler.ServeHTTP&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0xc42001ea31, 0x9, 0x154fb20, 0xc4201901c0, 0xc420112400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/pprof/pprof.go:237 +0x1b8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http/pprof.Index&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x154fb20, 0xc4201901c0, 0xc420112400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/pprof/pprof.go:248 +0x1db&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http.HandlerFunc.ServeHTTP&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x13b54d0, 0x154fb20, 0xc4201901c0, 0xc420112400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/server.go:1918 +0x44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*ServeMux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.ServeHTTP&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x15893e0, 0x154fb20, 0xc4201901c0, 0xc420112400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/server.go:2254 +0x130&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http.serverHandler.ServeHTTP&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0xc4201281a0, 0x154fb20, 0xc4201901c0, 0xc420112400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/server.go:2619 +0xb4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net/http.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*conn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.serve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0xc420184000, 0x15501e0, 0xc420126100&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/server.go:1801 +0x71d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;created by net/http.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*Server&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.Serve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/usr/local/go/src/net/http/server.go:2720 +0x288&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;崩溃问题&#34;&gt;崩溃问题&lt;/h2&gt;&#xA;&lt;p&gt;找崩溃原因，遇到大部分都是nil reference。&#xA;输出跟debug=2一样格式的栈信息（只不过只有崩溃goroutine一个栈的）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用emacs进行golang编程</title>
      <link>https://bopjiang.github.io/post/2014/04/21/%E4%BD%BF%E7%94%A8emacs%E8%BF%9B%E8%A1%8Cgolang%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2014/04/21/%E4%BD%BF%E7%94%A8emacs%E8%BF%9B%E8%A1%8Cgolang%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;&#xA;&lt;p&gt;Ubuntu 12.04， Emacs 23, 中文输入法fcitx&lt;/p&gt;&#xA;&lt;h3 id=&#34;emacs配置&#34;&gt;Emacs配置&lt;/h3&gt;&#xA;&lt;p&gt;使用el-get管理Emacs插件甚是方便，具体见[1]&lt;/p&gt;&#xA;&lt;p&gt;Emacs需要安装的插件&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;el-get （下面的emacs插件都使用el-get-install安装）&lt;/li&gt;&#xA;&lt;li&gt;cscope (安装前要在系统安装cscope)&lt;/li&gt;&#xA;&lt;li&gt;go-mode&lt;/li&gt;&#xA;&lt;li&gt;ibus&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;中文输入法问题&#34;&gt;中文输入法问题&lt;/h3&gt;&#xA;&lt;p&gt;除了安装ibus，下面两个要注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;apt-get安装python-xlib插件&lt;/li&gt;&#xA;&lt;li&gt;快捷键冲突：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;建立代码索引&#34;&gt;建立代码索引&lt;/h3&gt;&#xA;&lt;p&gt;用下面的脚本：&lt;/p&gt;&#xA;&lt;script src=&#34;https://gist.github.com/bopjiang/11146574.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/A-Song/archive/2013/03/09/2951951.html&#34;&gt;http://www.cnblogs.com/A-Song/archive/2013/03/09/2951951.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html&#34;&gt;http://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>go常用工具</title>
      <link>https://bopjiang.github.io/post/2014/04/18/go%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2014/04/18/go%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;p&gt;项目正式使用go语言，到现在已经有半年多了。有几个工具共享下：&lt;/p&gt;&#xA;&lt;h3 id=&#34;godep&#34;&gt;godep&lt;/h3&gt;&#xA;&lt;p&gt;依赖管理&#xA;godep get install&lt;/p&gt;&#xA;&lt;h3 id=&#34;godef&#34;&gt;godef&lt;/h3&gt;&#xA;&lt;h3 id=&#34;日志模块seelog&#34;&gt;日志模块seelog&lt;/h3&gt;&#xA;&lt;p&gt;日志量大的时候，日志产生的几个参数需要调整，不然日志时间偏差较大&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用go的开源项目&#34;&gt;使用Go的开源项目&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://github.com/bitly/nsq&#34;&gt;nsq&lt;/a&gt;, 一个分布式的消息队列&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.docker.io&#34;&gt;docker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt;, 配置服务，类似Zookeeper和doozer。是&lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt;的核心组件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://influxdb.com/&#34;&gt;influxdb&lt;/a&gt;, 一个时间序列（TSDB, time series database）数据库, 类似&lt;a href=&#34;https://bopjiang.github.io/blog/2014/12/01/graphing-in-graphite/&#34;&gt;graphite&lt;/a&gt;项目&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on 江 Blog</title>
    <link>https://bopjiang.github.io/tags/database/</link>
    <description>Recent content in Database on 江 Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bopjiang.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL和TiDB事务区别</title>
      <link>https://bopjiang.github.io/post/2019/04/21/mysql%E5%92%8Ctidb%E4%BA%8B%E5%8A%A1%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2019/04/21/mysql%E5%92%8Ctidb%E4%BA%8B%E5%8A%A1%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;我们知道, MySQL的默认隔离级别是可重复读(RR, Repeatable Read). TiDB是快照隔离 (SI, Snapshot Isolation), 虽然对外显示为Repeatable Read).&lt;/p&gt;&#xA;&lt;p&gt;TiDB 使用 Percolator 事务模型, 冲突检测只在事务提交时才触发, 而MySQL则是通过锁等待机制(如SELECT &amp;hellip; FOR UPDATE)解决冲突问题.TiDB这样设计有好有坏, 在冲突小的情况下,由于没有锁等待,系统的并发性能更好. 但在冲突严重的情况下, 会造成事务失败增多,影响并发性能.&lt;/p&gt;&#xA;&lt;p&gt;反映到应用开发中, 我们会发现, 在很多场景, MySQL事务提交成功, 但是TiDB事务提交却可能会失败.&#xA;如果应用代码有在事务执行过程中穿插业务判断逻辑, 是不能依赖TiDB自带的事务重试机制的. 这时,要显式的关闭事务重试, 重试逻辑必须放到业务层来做.&lt;/p&gt;&#xA;&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;&#xA;&lt;p&gt;下面三个例子, 从TiDB和MySQL执行结果和逻辑的区别, 我们可以看到两个数据库系统在事务处理上的差别.&lt;/p&gt;&#xA;&lt;p&gt;本文中MySQL的版本是8.0.15, TiDB的版本是v2.1.7, 事务隔离级别都为默认值Repeatable Read.&lt;/p&gt;&#xA;&lt;h3 id=&#34;例1-update在事务中处理逻辑不同&#34;&gt;例1: Update在事务中处理逻辑不同&lt;/h3&gt;&#xA;&lt;p&gt;创建表t1, 语句如下:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在MySQL和TiDB中分别执行下面的两个事务, 执行时序如下:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Time&lt;/th&gt;&#xA;          &lt;th&gt;Tx1&lt;/th&gt;&#xA;          &lt;th&gt;Tx2&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t0&lt;/td&gt;&#xA;          &lt;td&gt;begin;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t1&lt;/td&gt;&#xA;          &lt;td&gt;select * from t1;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;begin;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t3&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;insert into t1 values(1,10);&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t4&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;commit;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t5&lt;/td&gt;&#xA;          &lt;td&gt;update t1 set b=b+10 where a = 1;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t6&lt;/td&gt;&#xA;          &lt;td&gt;commit;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;t7&lt;/td&gt;&#xA;          &lt;td&gt;select * from t1;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;MySQL, t7时刻,select语句的执行结果是&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL语句解析为AST</title>
      <link>https://bopjiang.github.io/post/2019/04/02/sql%E8%AF%AD%E5%8F%A5%E8%A7%A3%E6%9E%90%E4%B8%BAast/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2019/04/02/sql%E8%AF%AD%E5%8F%A5%E8%A7%A3%E6%9E%90%E4%B8%BAast/</guid>
      <description>&lt;p&gt;TiDB中的SQL Parser模块现在独立为一个库了，在其他项目也可以很方便的调用。&lt;/p&gt;&#xA;&lt;p&gt;一个例子：&lt;/p&gt;&#xA;&lt;script src=&#34;https://gist.github.com/bopjiang/b5d7de1471d1a1be3387e33c6eb30591.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h2 id=&#34;ast&#34;&gt;AST&lt;/h2&gt;&#xA;&lt;p&gt;解析出来是如下的样子：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-0 *ast.SelectStmt SELECT t1.a, t2.b FROM t1 JOIN t2 ON t1.id = t2.fid WHERE t1.c&amp;gt;100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.TableRefsClause&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.Join&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.TableSource&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.TableName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.TableSource&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.TableName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.OnCondition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.BinaryOperationExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-5 &#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-6 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-5 &#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-6 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.BinaryOperationExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*driver.ValueExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-1 &#x9;*ast.FieldList&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.SelectField t1.a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-2 &#x9;&#x9;*ast.SelectField t2.b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-3 &#x9;&#x9;&#x9;*ast.ColumnNameExpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L-4 &#x9;&#x9;&#x9;&#x9;*ast.ColumnName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SELECT语句被解析为三部分(L-1), TableRefsClause对应FROM语句部分，BinaryOperationExpr对应WHERE语句部分，FieldList对应Select字段部分&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Pyleus开发Storm应用</title>
      <link>https://bopjiang.github.io/post/2015/01/23/%E4%BD%BF%E7%94%A8pyleus%E5%BC%80%E5%8F%91storm%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2015/01/23/%E4%BD%BF%E7%94%A8pyleus%E5%BC%80%E5%8F%91storm%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;h3 id=&#34;storm&#34;&gt;Storm&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;什么是Storm(&lt;a href=&#34;https://storm.apache.org/&#34;&gt;https://storm.apache.org/&lt;/a&gt;)&#xA;解决的问题：实时数据分析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;pyleus&#34;&gt;Pyleus&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用Python写Storm topolopgy&#xA;Storm是在JVM平台上开发的，要使用非JVM平台语言（如Python，Go),需要使用ShellBolt，但是top仍然要使用Java定义&#xA;Pyleus是全部使用Python开发spout,bolt,top的一整套框架，可以完全不使用Java。&lt;/p&gt;&#xA;&lt;p&gt;Pyleus由Yelp开发&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;遇到的坑&#34;&gt;遇到的坑&lt;/h3&gt;&#xA;&lt;h4 id=&#34;定义muti-stream时的语法&#34;&gt;定义muti-stream时的语法&lt;/h4&gt;&#xA;&lt;p&gt;注意，当只有一个stream时，&lt;a href=&#34;http://yelp.github.io/pyleus/grouping.html#groupings&#34;&gt;文档&lt;/a&gt;中定义muti-stream的语法有有问题，运行提交topoplogy时会报错&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Topology submission exception. (topology name=&#39;top_name&#39;) #&amp;lt;InvalidTopologyException InvalidTopologyException(msg:Component: [my_bolt] subscribes from non-existent stream:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultipleBolt&lt;/span&gt;(Bolt):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OUTPUT_FIELDS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stream-id&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stream-fake&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fake&amp;#34;&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;##只有一个stream时，记得加个假的，不然会出错&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>使用docker安装storm集群</title>
      <link>https://bopjiang.github.io/post/2014/12/22/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85storm%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://bopjiang.github.io/post/2014/12/22/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85storm%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;h4 id=&#34;基础&#34;&gt;基础&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://storm.apache.org/&#34;&gt;storm&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/wurstmeister/storm-docker&#34;&gt;storm-docker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;docker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.fig.sh/&#34;&gt;fig&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;pip, python&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;步骤&#34;&gt;步骤&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;升级内核&lt;/p&gt;&#xA;&lt;p&gt;由于是CentOS 6.3环境，内核不满足版本要求。升级内核版本至3.10.63&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In general, a 3.8 Linux kernel is the minimum requirement for Docker, as some of the prior versions have known issues that are triggered by Docker. Linux kernel versions older than 3.8 are known to cause kernel panics and to break Docker.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The latest minor version (3.x.y) of the 3.10 (or a newer maintained version) Linux kernel is recommended. Keeping the kernel up to date with the latest minor version will ensure critical kernel bugs get fixed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
